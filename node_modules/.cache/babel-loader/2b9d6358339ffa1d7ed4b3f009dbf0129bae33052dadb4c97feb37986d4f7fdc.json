{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\n// istanbul ignore next\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\nvar _utils = require('../utils');\nvar _exception = require('../exception');\nvar _exception2 = _interopRequireDefault(_exception);\nexports['default'] = function (instance) {\n  instance.registerHelper('if', function (conditional, options) {\n    if (arguments.length != 2) {\n      throw new _exception2['default']('#if requires exactly one argument');\n    }\n    if (_utils.isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if (!options.hash.includeZero && !conditional || _utils.isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n  instance.registerHelper('unless', function (conditional, options) {\n    if (arguments.length != 2) {\n      throw new _exception2['default']('#unless requires exactly one argument');\n    }\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n};\nmodule.exports = exports['default'];","map":{"version":3,"names":["instance","registerHelper","conditional","options","arguments","length","_exception2","_utils","isFunction","call","hash","includeZero","isEmpty","inverse","fn","helpers"],"sources":["/home/andrewwang/MoneyWatcher/node_modules/handlebars/lib/handlebars/helpers/if.js"],"sourcesContent":["import { isEmpty, isFunction } from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('if', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#if requires exactly one argument');\n    }\n    if (isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if ((!options.hash.includeZero && !conditional) || isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#unless requires exactly one argument');\n    }\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n}\n"],"mappings":";;;;;;;;;;qBAAoC,UAAU;yBACxB,cAAc;;qBAErB,UAASA,QAAQ,EAAE;EAChCA,QAAQ,CAACC,cAAc,CAAC,IAAI,EAAE,UAASC,WAAW,EAAEC,OAAO,EAAE;IAC3D,IAAIC,SAAS,CAACC,MAAM,IAAI,CAAC,EAAE;MACzB,MAAM,IAAAC,WAAA,YAAc,mCAAmC,CAAC;;IAE1D,IAAIC,MAAA,CAAAC,UAAA,CAAWN,WAAW,CAAC,EAAE;MAC3BA,WAAW,GAAGA,WAAW,CAACO,IAAI,CAAC,IAAI,CAAC;;;;;;IAMtC,IAAI,CAAEN,OAAO,CAACO,IAAI,CAACC,WAAW,IAAI,CAACT,WAAW,IAAKK,MAAA,CAAAK,OAAA,CAAQV,WAAW,CAAC,EAAE;MACvE,OAAOC,OAAO,CAACU,OAAO,CAAC,IAAI,CAAC;KAC7B,MAAM;MACL,OAAOV,OAAO,CAACW,EAAE,CAAC,IAAI,CAAC;;GAE1B,CAAC;EAEFd,QAAQ,CAACC,cAAc,CAAC,QAAQ,EAAE,UAASC,WAAW,EAAEC,OAAO,EAAE;IAC/D,IAAIC,SAAS,CAACC,MAAM,IAAI,CAAC,EAAE;MACzB,MAAM,IAAAC,WAAA,YAAc,uCAAuC,CAAC;;IAE9D,OAAON,QAAQ,CAACe,OAAO,CAAC,IAAI,CAAC,CAACN,IAAI,CAAC,IAAI,EAAEP,WAAW,EAAE;MACpDY,EAAE,EAAEX,OAAO,CAACU,OAAO;MACnBA,OAAO,EAAEV,OAAO,CAACW,EAAE;MACnBJ,IAAI,EAAEP,OAAO,CAACO;KACf,CAAC;GACH,CAAC;CACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}