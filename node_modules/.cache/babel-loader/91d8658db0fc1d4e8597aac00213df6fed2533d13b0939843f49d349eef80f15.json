{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar _utils = require('./utils');\nvar logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function lookupLevel(level) {\n    if (typeof level === 'string') {\n      var levelMap = _utils.indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n    return level;\n  },\n  // Can be overridden in the host environment\n  log: function log(level) {\n    level = logger.lookupLevel(level);\n    if (typeof console !== 'undefined' && logger.lookupLevel(logger.level) <= level) {\n      var method = logger.methodMap[level];\n      // eslint-disable-next-line no-console\n      if (!console[method]) {\n        method = 'log';\n      }\n      for (var _len = arguments.length, message = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        message[_key - 1] = arguments[_key];\n      }\n      console[method].apply(console, message); // eslint-disable-line no-console\n    }\n  }\n};\nexports['default'] = logger;\nmodule.exports = exports['default'];","map":{"version":3,"names":["logger","methodMap","level","lookupLevel","levelMap","_utils","indexOf","toLowerCase","parseInt","log","console","method","message","Array","_len","_key","arguments","apply"],"sources":["/home/andrewwang/MoneyWatcher/node_modules/handlebars/lib/handlebars/logger.js"],"sourcesContent":["import { indexOf } from './utils';\n\nlet logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function(level) {\n    if (typeof level === 'string') {\n      let levelMap = indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n\n  // Can be overridden in the host environment\n  log: function(level, ...message) {\n    level = logger.lookupLevel(level);\n\n    if (\n      typeof console !== 'undefined' &&\n      logger.lookupLevel(logger.level) <= level\n    ) {\n      let method = logger.methodMap[level];\n      // eslint-disable-next-line no-console\n      if (!console[method]) {\n        method = 'log';\n      }\n      console[method](...message); // eslint-disable-line no-console\n    }\n  }\n};\n\nexport default logger;\n"],"mappings":";;;qBAAwB,SAAS;AAEjC,IAAIA,MAAM,GAAG;EACXC,SAAS,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;EAC7CC,KAAK,EAAE,MAAM;;EAGbC,WAAW,EAAE,SAAAA,YAASD,KAAK,EAAE;IAC3B,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;MAC7B,IAAIE,QAAQ,GAAGC,MAAA,CAAAC,OAAA,CAAQN,MAAM,CAACC,SAAS,EAAEC,KAAK,CAACK,WAAW,EAAE,CAAC;MAC7D,IAAIH,QAAQ,IAAI,CAAC,EAAE;QACjBF,KAAK,GAAGE,QAAQ;OACjB,MAAM;QACLF,KAAK,GAAGM,QAAQ,CAACN,KAAK,EAAE,EAAE,CAAC;;;IAI/B,OAAOA,KAAK;GACb;;EAGDO,GAAG,EAAE,SAAAA,IAASP,KAAK,EAAc;IAC/BA,KAAK,GAAGF,MAAM,CAACG,WAAW,CAACD,KAAK,CAAC;IAEjC,IACE,OAAOQ,OAAO,KAAK,WAAW,IAC9BV,MAAM,CAACG,WAAW,CAACH,MAAM,CAACE,KAAK,CAAC,IAAIA,KAAK,EACzC;MACA,IAAIS,MAAM,GAAGX,MAAM,CAACC,SAAS,CAACC,KAAK,CAAC;;MAEpC,IAAI,CAACQ,OAAO,CAACC,MAAM,CAAC,EAAE;QACpBA,MAAM,GAAG,KAAK;;wCAVIC,OAAO,GAAAC,KAAA,CAAAC,IAAA,OAAAA,IAAA,WAAAC,IAAA,MAAAA,IAAA,GAAAD,IAAA,EAAAC,IAAA;QAAPH,OAAO,CAAAG,IAAA,QAAAC,SAAA,CAAAD,IAAA;;MAY3BL,OAAO,CAACC,MAAM,EAAAM,KAAC,CAAfP,OAAO,EAAYE,OAAO,CAAC,CAAC;;;CAGjC;qBAEcZ,MAAM"},"metadata":{},"sourceType":"script","externalDependencies":[]}