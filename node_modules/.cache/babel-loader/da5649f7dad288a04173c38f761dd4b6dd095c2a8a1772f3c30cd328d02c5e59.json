{"ast":null,"code":"/*async function textFetch(filename, data=undefined) {\n    console.log(\"fetching text: \", filename);\n    const d = await (data) ? fetch(filename, {\n            method: \"POST\", body: data }) \n        : fetch(filename);\n    if (d.status !== 200) return undefined;\n    const text = await d.text();\n    return(text);\n}*/\n\nfunction buildIpAddress(port, local_address) {\n  const address = window.location.origin;\n  console.log(address);\n  let addr = address.replace(\"https\", \"http\");\n  const port_regex = /:[0-9]+$/;\n  const port_index = addr.search(port_regex);\n  let addr1;\n  if (port_index > 0) addr1 = addr.substring(0, port_index);else addr1 = addr;\n  if (port) addr1 += \":\" + port;\n  if (local_address) addr1 += local_address;\n  console.log('addr=', addr, \"port_i=\", port_index, \"addr1=\", addr1);\n  return addr1;\n}\nasync function getJsonData(local_address, body) {\n  // console.log(body);\n  const filename = buildIpAddress(3000, local_address);\n  //const filename = \"http://127.0.0.1:3000/api/v1/transaction\"\n  const d = await jsonFetch(filename, body, \"Bearer \" + localStorage.token);\n  return d;\n}\nasync function jsonFetch(filename, data = undefined, auth = undefined) {\n  const headers = {\n    \"Content-type\": \"application/json; charset=UTF-8\"\n  };\n  if (auth) headers[\"Authorization\"] = auth;\n  // console.log(\"fetching JSON: \", filename, headers);\n  const d = await (data ? fetch(filename, {\n    method: \"POST\",\n    headers: headers,\n    body: JSON.stringify(data)\n  }) : fetch(filename, {\n    method: \"GET\",\n    headers: headers\n  }));\n  //const code = d.status / 100;\n  //console.log(\"data=\", d, \"code=\", code)\n  //if (code !== 2) return undefined;\n  //const json = await d.json();\n  return d;\n}\nconst isActive = () => {\n  return localStorage.getItem(\"active\");\n};\nconst setActive = b => {\n  localStorage.setItem(\"active\", b);\n};\nexport default jsonFetch;\nexport { jsonFetch, buildIpAddress, getJsonData, isActive, setActive };","map":{"version":3,"names":["buildIpAddress","port","local_address","address","window","location","origin","console","log","addr","replace","port_regex","port_index","search","addr1","substring","getJsonData","body","filename","d","jsonFetch","localStorage","token","data","undefined","auth","headers","fetch","method","JSON","stringify","isActive","getItem","setActive","b","setItem"],"sources":["/home/andrewwang/ImageClassifier/src/components/common.js"],"sourcesContent":["\n/*async function textFetch(filename, data=undefined) {\n    console.log(\"fetching text: \", filename);\n    const d = await (data) ? fetch(filename, {\n            method: \"POST\", body: data }) \n        : fetch(filename);\n    if (d.status !== 200) return undefined;\n    const text = await d.text();\n    return(text);\n}*/\n\nfunction buildIpAddress(port, local_address) {\n    const address = window.location.origin;\n    console.log(address);\n    let addr = address.replace(\"https\", \"http\");\n    const port_regex = /:[0-9]+$/;\n    const port_index = addr.search(port_regex);\n    let addr1;\n    if (port_index > 0) addr1 = addr.substring(0, port_index);\n    else addr1 = addr;\n    if (port) addr1 += \":\" + port;\n    if (local_address) addr1 += local_address;\n    console.log('addr=', addr, \"port_i=\", port_index, \"addr1=\", addr1);\n    return (addr1);\n}\n\nasync function getJsonData(local_address, body) {\n    // console.log(body);\n    const filename = buildIpAddress(3000, local_address);\n    //const filename = \"http://127.0.0.1:3000/api/v1/transaction\"\n    const d = await jsonFetch(filename, body, \"Bearer \" + localStorage.token)\n    return d;\n}\nasync function jsonFetch(filename, data = undefined, auth = undefined) {\n\n    const headers = { \"Content-type\": \"application/json; charset=UTF-8\" };\n    if (auth) headers[\"Authorization\"] = auth;\n    // console.log(\"fetching JSON: \", filename, headers);\n    const d = await ((data) ? fetch(filename, {\n        method: \"POST\",\n        headers: headers,\n        body: JSON.stringify(data)\n    })\n        : fetch(filename, {\n            method: \"GET\",\n            headers: headers\n        }));\n    //const code = d.status / 100;\n    //console.log(\"data=\", d, \"code=\", code)\n    //if (code !== 2) return undefined;\n    //const json = await d.json();\n    return (d);\n}\n\nconst isActive = () => {\n    return localStorage.getItem(\"active\");\n}\n\nconst setActive = (b) => {\n    localStorage.setItem(\"active\", b)\n}\nexport default jsonFetch;\nexport { jsonFetch, buildIpAddress, getJsonData, isActive, setActive };"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,cAAcA,CAACC,IAAI,EAAEC,aAAa,EAAE;EACzC,MAAMC,OAAO,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM;EACtCC,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC;EACpB,IAAIM,IAAI,GAAGN,OAAO,CAACO,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC;EAC3C,MAAMC,UAAU,GAAG,UAAU;EAC7B,MAAMC,UAAU,GAAGH,IAAI,CAACI,MAAM,CAACF,UAAU,CAAC;EAC1C,IAAIG,KAAK;EACT,IAAIF,UAAU,GAAG,CAAC,EAAEE,KAAK,GAAGL,IAAI,CAACM,SAAS,CAAC,CAAC,EAAEH,UAAU,CAAC,CAAC,KACrDE,KAAK,GAAGL,IAAI;EACjB,IAAIR,IAAI,EAAEa,KAAK,IAAI,GAAG,GAAGb,IAAI;EAC7B,IAAIC,aAAa,EAAEY,KAAK,IAAIZ,aAAa;EACzCK,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEC,IAAI,EAAE,SAAS,EAAEG,UAAU,EAAE,QAAQ,EAAEE,KAAK,CAAC;EAClE,OAAQA,KAAK;AACjB;AAEA,eAAeE,WAAWA,CAACd,aAAa,EAAEe,IAAI,EAAE;EAC5C;EACA,MAAMC,QAAQ,GAAGlB,cAAc,CAAC,IAAI,EAAEE,aAAa,CAAC;EACpD;EACA,MAAMiB,CAAC,GAAG,MAAMC,SAAS,CAACF,QAAQ,EAAED,IAAI,EAAE,SAAS,GAAGI,YAAY,CAACC,KAAK,CAAC;EACzE,OAAOH,CAAC;AACZ;AACA,eAAeC,SAASA,CAACF,QAAQ,EAAEK,IAAI,GAAGC,SAAS,EAAEC,IAAI,GAAGD,SAAS,EAAE;EAEnE,MAAME,OAAO,GAAG;IAAE,cAAc,EAAE;EAAkC,CAAC;EACrE,IAAID,IAAI,EAAEC,OAAO,CAAC,eAAe,CAAC,GAAGD,IAAI;EACzC;EACA,MAAMN,CAAC,GAAG,OAAQI,IAAI,GAAII,KAAK,CAACT,QAAQ,EAAE;IACtCU,MAAM,EAAE,MAAM;IACdF,OAAO,EAAEA,OAAO;IAChBT,IAAI,EAAEY,IAAI,CAACC,SAAS,CAACP,IAAI;EAC7B,CAAC,CAAC,GACII,KAAK,CAACT,QAAQ,EAAE;IACdU,MAAM,EAAE,KAAK;IACbF,OAAO,EAAEA;EACb,CAAC,CAAC,CAAC;EACP;EACA;EACA;EACA;EACA,OAAQP,CAAC;AACb;AAEA,MAAMY,QAAQ,GAAGA,CAAA,KAAM;EACnB,OAAOV,YAAY,CAACW,OAAO,CAAC,QAAQ,CAAC;AACzC,CAAC;AAED,MAAMC,SAAS,GAAIC,CAAC,IAAK;EACrBb,YAAY,CAACc,OAAO,CAAC,QAAQ,EAAED,CAAC,CAAC;AACrC,CAAC;AACD,eAAed,SAAS;AACxB,SAASA,SAAS,EAAEpB,cAAc,EAAEgB,WAAW,EAAEe,QAAQ,EAAEE,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}